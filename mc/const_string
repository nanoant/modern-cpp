// -*- C++ -*-

// idea taken from: https://www.daniweb.com/software-development/cpp/code/482276/c-11-compile-time-string-concatenation-with-constexpr#post2110458

#include <stdexcept>
#include <string>
#include <array>
#include <utility>

template <std::size_t N> class const_string {
  std::array<char, N> array;

  template <std::size_t M> friend class const_string;

 public:
  constexpr const_string(const char(&arg)[N])
      : array(reinterpret_cast<std::array<char, N> const&>(arg)) {}

  constexpr char operator[](std::size_t n) const {
    return n < N ? array[n] : throw std::out_of_range("");
  }

  constexpr std::size_t size() const { return N - 1; }

  operator char*() { return array.data(); }
  const char* c_str() const { return array.data(); }
  char* c_str() { return array.data(); }

  template <std::size_t M,
            typename LIndices = std::make_index_sequence<N - 1>,
            typename RIndices = std::make_index_sequence<M - 1>>
  constexpr const_string<N + M - 1> operator+(
      const const_string<M>& rhs) const {
    return concat_impl(array, LIndices(), rhs.array, RIndices());
  }

 private:
  template <std::size_t... NIds, std::size_t M, std::size_t... MIds>
  static constexpr const_string<N + M - 1> concat_impl(
      const std::array<char, N>& lhs,
      std::index_sequence<NIds...>,
      const std::array<char, M>& rhs,
      std::index_sequence<MIds...>) {
    return const_string<N + M - 1>({ lhs[NIds]..., rhs[MIds]..., '\0' });
  }
};

template <std::size_t N> auto c(const char(&array)[N]) {
  return const_string<N>(array);
}
